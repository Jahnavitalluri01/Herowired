Question 26: Longest Palindromic Substring
class Solution {
    public String longestPalindrome(String s) {
        int start=0,end=0;
        for(int i=0; i<s.length(); i++){
            int odd=expand(s,i,i);
            int even=expand(s,i,i+1);
            int len=Math.max(odd,even);
            if(len>end-start){
                start=i-(len-1)/2;
                end=i+len/2;
            }
        }
        return s.substring(start,end+1);
    }
    int expand(String s,int a,int b){
        while(a>=0 && b<s.length() && s.charAt(a)==s.charAt(b)){
            a--;
            b++;
        }
        return b-a-1;
    }
}

Question 27: Median of Two Sorted Arrays



Question 28: Regular Expression Matching
class Solution {
public boolean isMatch(String s, String p) {
    return helper(0,0,s,p,new Boolean[s.length()][p.length()]);
}
public boolean helper(int index1,int index2, String s, String p, Boolean[][] dp) {
    if(index1>=s.length()|| index2>= p.length()) {
        if(index1>=s.length()&& index2>= p.length())
            return true;
        else  if(index2+1<p.length() && p.charAt(index2+1)=='*')  {
        	return helper(index1, index2+2, s, p, dp);
        }
        
            return false;
        
    }
    if(dp[index1][index2] != null)
        return dp[index1][index2];
    
    if(index2+1<p.length() && p.charAt(index2+1)=='*')
    {
    	if(p.charAt(index2) == '.')
        {
            return  dp[index1][index2] = helper(index1+1,index2,s,p,dp) || helper(index1,index2+2,s,p,dp);
        }
    	else {
    		if(s.charAt(index1) == p.charAt(index2))    {
               return dp[index1][index2] =helper(index1+1,index2,s,p,dp) || helper(index1,index2+2,s,p,dp); 
            }
    		else {
    			return dp[index1][index2]=helper(index1,index2+2,s,p,dp);
    		}
    			
    	}
    }
    else {
    	 if(s.charAt(index1) == p.charAt(index2))  {
            return dp[index1][index2] =helper(index1+1,index2+1,s,p,dp); 
         }
         else if(p.charAt(index2) == '.')  {
             return  dp[index1][index2] = helper(index1+1,index2+1,s,p,dp);
         }
    }
    return false;
}
}  

Question 29: Letter Combinations of a Phone Number
class Solution {
    public List<String> letterCombinations(String digits) {
        String a[][]={{"a","b","c"},{"d","e","f"},{"g","h","i"},{"j","k","l"},{"m","n","o"},
        {"p","q","r","s"},{"t","u","v"},{"w","x","y","z"}};
        List<String> l=new ArrayList<String>();
        for(int i=0; i<digits.length(); i++){
            if(i==0){
                int k=Integer.parseInt(String.valueOf(digits.charAt(i)))-2;
                      System.out.println(a[k][0]);
                for(int j=0; j<a[k].length; j++){
                    l.add(String.valueOf(a[k][j]));
                }
            }
            else{
              List<String> ll=new ArrayList<String>();
              int k=Integer.parseInt(String.valueOf(digits.charAt(i)))-2;
         
              for(int j=0; j<a[k].length; j++){
                  for(int m=0; m<l.size(); m++){
                      
                  ll.add(l.get(m)+a[k][j]);
                  }
              }
              l=ll;
            }
        }
        return l;
    }
}

Question 30: Longest Common Prefix
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs.length==0){
            return "";
        }        
        String prefix=strs[0];
        
        for(int i=1; i<strs.length; i++){
            while(strs[i].indexOf(prefix)!=0){
                prefix=prefix.substring(0,prefix.length()-1);
            }
        }
        return prefix;
    }
}

Question 31: Valid Parentheses
class Solution {
    public boolean isValid(String s) {
        Stack<Character> st=new Stack<Character>();
        for(int i=0; i<s.length(); i++){
            if(st.empty()){
                if(s.charAt(i)==')' || s.charAt(i)==']' || s.charAt(i)=='}'){
                    return false;
                }
                else{
                st.push(s.charAt(i));
                }
            }
            else{
                if(s.charAt(i)==')' && st.peek()=='('){
                    st.pop();
                }
                else if(s.charAt(i)==']' && st.peek()=='['){
                    st.pop();
                }
                else if(s.charAt(i)=='}' && st.peek()=='{'){
                    st.pop();
                }
                else{
                    st.push(s.charAt(i));
                }
            }
        }
        if(st.empty()){
            return true;
        }
        return false;
    }
}

Question 32: Generate Parentheses
class Solution {
    List<String> l=new ArrayList<String>();
    public List<String> generateParenthesis(int n) {
        
        char[] s=new char[2*n];
        printparentheses(n,s,0,0,0);
        return l;
    }
      void printparentheses(int n,char[] s,int pos,int start,int end){
         if(end==n){
             String str="";
             for(int i=0; i<s.length; i++){
                 str+=s[i];
             }
            l.add(str);
         }
         else{
             if(start>end){
                 s[pos]=')';
                 printparentheses(n,s,pos+1,start,end+1);
             }
             if(start<n){
                 s[pos]='(';
                 printparentheses(n,s,pos+1,start+1,end);
             }
         }
     }
}


Question 33: Merge k Sorted Lists
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
       ListNode l=new ListNode();
       ArrayList<Integer> al=new ArrayList<Integer>();
       for(int i=0; i<lists.length; i++){
           ListNode a=lists[i];
           while(a!=null){
               al.add(a.val);
               a=a.next;
           }
       }
       Collections.sort(al);
       ListNode temp=l;
       for(int i=0; i<al.size(); i++){
           ListNode n=new ListNode(al.get(i));
           temp.next=n;
           temp=temp.next;
       }
       return l.next;
    }
}

Question 34: Swap Nodes in Pairs
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode l=new ListNode();
        List<Integer> al=new ArrayList<Integer>();
        ListNode e=l;
        while(head!=null && head.next!=null){
           int x=head.val;
           ListNode xx=new ListNode(x);
           head=head.next;
          int y=head.val;
           ListNode yy=new ListNode(y);
           e.next=yy;
           e=e.next;
           e.next=xx;
           e=e.next;
            head=head.next;
        }
        if(head!=null && head.next==null){
            e.next=head;
        }
        return l.next;
    }
}

Question 35: Reverse Nodes in k-Group
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode l=new ListNode();
        ListNode ll=l;
        int c=0;
        ArrayList<Integer> al=new ArrayList<Integer>();
        while(head!=null){  
            if(c!=k){
                al.add(head.val);
                head=head.next;
                c+=1;
            }
            if(c==k){
                for(int i=al.size()-1; i>=0; i--){
                    ListNode n=new ListNode(al.get(i));
                    ll.next=n;
                    ll=ll.next;
                }
                c=0;
                al.clear();
            }
        }
        int i=0;
        while(c>0){
            ListNode n=new ListNode(al.get(i));
            ll.next=n;
            ll=ll.next;
            i+=1;
            c-=1;
        }
        return l.next;
    }
}

Question 36:  Remove Duplicates from Sorted Array
class Solution {
    public int removeDuplicates(int[] nums) {
        Map<Integer,Integer> m=new HashMap<Integer,Integer>();
        int c=1;
        m.put(nums[0],1);
        for(int i=1; i<nums.length; i++){
            if(m.containsKey(nums[i])==false){
               nums[c]=nums[i];
               System.out.println("c= "+c+" "+nums[c]);
               m.put(nums[i],1);
               c+=1;
            }
            
        }
         return c;
    }
}

Question 37: Remove Element
class Solution {
    public int removeElement(int[] nums, int val) {
        int c=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i]!=val){
                nums[c]=nums[i];
                c+=1;
            }
        }
        return c;
    }
}

Question 38: Find the Index of the First Occurrence in a String
class Solution {
    public int strStr(String haystack, String needle) {
        if(haystack.contains(needle)){
            return haystack.indexOf(needle);
        }
        return -1;
    }
}

Question 39: Divide Two Integers
public class Solution {
    public int divide(int dividend, int divisor) {
		//all of these if else statements are only for edge cases and to make both dividend and divisor negative
        if (dividend == Integer.MIN_VALUE && divisor == -1)
            return Integer.MAX_VALUE;
        if (divisor == 1)
            return dividend;
        if (dividend > 0 && divisor > 0)
            return divide(-dividend, -divisor);
        else if (dividend > 0)
            return -divide(-dividend, divisor);
        else if (divisor > 0)
            return -divide(dividend, -divisor);
        if (divisor < dividend || dividend == 0)
            return 0;
        int sum = divisor;
        int mult = 1;
        while ((sum + sum) < sum && (sum + sum) >= dividend) {
            sum += sum;
            mult += mult;
        }
        return mult + divide(dividend - sum, divisor);
    }
}

Question 42: Longest Valid Parentheses
class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> st=new Stack<Integer>();
        int res=0;
        st.push(-1);
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i)=='('){
               st.push(i);
            }
            else{
                if(st.isEmpty()==false){
                    st.pop();
                }
                if(st.isEmpty()==false){
                    res=Math.max(res,i-st.peek());
                }
                else{
                    st.push(i);
                }
            }
        }
        return res;
    }
}

Question 43: Search in Rotated Sorted Array
class Solution {
    public int search(int[] nums, int target) {
        for(int i=0; i<nums.length; i++){
            if(nums[i]==target){
                return i;
            }
        }
        return -1;
    }
}

Question 44: Find First and Last Position of Element in Sorted Array
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int f=-1,la=-1;
        List<Integer> l=new ArrayList<Integer>();
        int a[]=new int[2];
        for(int i:nums){
             l.add(i);
        }
        f=l.indexOf(target);
        la=l.lastIndexOf(target);
        a[0]=f;
        a[1]=la;
        return a;
    }
}

Question 45: Search Insert Position
class Solution {
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;
    
        while (start <= end) {

        int mid = start + (end - start) / 2;

        if (target < nums[mid]) {
            end = mid - 1;
        }

        else if (target > nums[mid]) {
            start = mid + 1;
        }

        else {
            return mid;
        }
    }
    return start;
    }
}

Question 46: Valid Sudoku
class Solution {
    public boolean isValidSudoku(char[][] board) {
        for(int i=0; i<9; i++){
            for(int j=0; j<9; j++){
                if(board[i][j]!='.'){
                    for(int k=0; k<9; k++){
                        if(k!=j){
                            if(board[i][j]==board[i][k]){
                                return false;
                            }
                        }
                        if(k!=i){
                            if(board[i][j]==board[k][j]){
                                return false;
                            }
                        }
                    }
                    int x=j-(j%3);
                    int y=i-(i%3);
                    for(int l=y; l<y+3; l++){
                        for(int m=x; m<x+3; m++){
                            if(l!=i || m!=j){
                                if(board[i][j]==board[l][m]){
                                    return false;
                                }
                            }
                        }
                    }

                }
            }
        }
        return true;
    }
}

Question 48: Count and Say
class Solution {
    public String countAndSay(int n) {
        String x="1";
        for(int i=1; i<n; i++){
            String res="";
            Stack<Character> s=new Stack<Character>();
            ArrayList<Character> l=new ArrayList<Character>();
            l.add(x.charAt(0));
            s.push(x.charAt(0));
            for(int j=1; j<x.length(); j++){
                if(x.charAt(j)==s.peek()){
                    l.add(x.charAt(j));
                }
                else{
                    res+=l.size()+String.valueOf(l.get(0));
                    s.push(x.charAt(j));
                    l.clear();
                    l.add(x.charAt(j));
                }
            }
            if(l.size()>0){
                res+=l.size()+String.valueOf(l.get(0));
            }
            x=res;
        }
        return x;
    }
}

Question 49: Combination Sum
class Solution {
     List<List<Integer>> l=new ArrayList<List<Integer>>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
       
        ArrayList<Integer> t=new ArrayList<Integer>();
        Set<Integer> s=new HashSet<Integer>();
        for(int ele:candidates){
            s.add(ele);
        }
       ArrayList<Integer> ans=new ArrayList<Integer>();
       ans.addAll(s);
       Collections.sort(ans);
       findnum(ans,target,0,t);
       return l;
    }
    public void findnum(ArrayList<Integer> ans,int target,int ind,ArrayList<Integer> t){
        if(target==0){
            for(int ele: t){
                    System.out.print(" ele:"+ele);
                    }
            l.add(new ArrayList<>(t));
            return;
        }
        else{
            for(int i=ind; i<ans.size(); i++){
                if(target-ans.get(i)>=0){
                    
                    t.add(ans.get(i));
                    findnum(ans,target-ans.get(i),i,t);
                    t.remove(ans.get(i));
                }
            }
        }
    }

}

Question 50: Combination Sum II
class Solution {
     List<List<Integer>> l=new ArrayList<List<Integer>>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {  
        ArrayList<Integer> t=new ArrayList<Integer>();
         
       Arrays.sort(candidates);
       findnum(candidates,target,0,t);
       return l;
    }
    public void findnum(int [] ans,int target,int ind,ArrayList<Integer> t){

        if(target==0){
           
            l.add(new ArrayList<>(t));
        
            return;
        }
        for(int i=ind; i<ans.length; i++){
            if(i!=ind && ans[i]==ans[i-1]){
                continue;
            }  
            if(ans[i]>target){
                break;
            }
                    t.add(ans[i]);
                    findnum(ans,target-ans[i],i+1,t);
                   t.remove(t.size()-1);        
            }   
    }
}

Question 51: First Missing Positive
class Solution {
    public int firstMissingPositive(int[] nums) {
        Arrays.sort(nums);
        int j=1;
        Stack<Integer> s=new Stack<Integer>();
        s.push(-99999);
        for(int i=0; i<nums.length; i++){
            if(nums[i]>0){
                if(s.peek()!=nums[i]){
                if(nums[i]!=j){
                    return j;
                }
                else{
                    s.push(j);
                    j+=1;
                }
                }
            }
        }
        return j;
    }
}

Question 52: Trapping Rain Water
class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int sum=0;
        int l[]=new int[n];
        int r[]=new int[n];
        int ll=0,rr=0;
        for(int i=0; i<n; i++){
           if(height[i]>ll){
               l[i]=height[i];
               ll=height[i];
           }
           else{
               l[i]=ll;
           }
           if(height[n-i-1]>rr){
               r[n-i-1]=height[n-i-1];
               rr=height[n-i-1];
           }
           else{
               r[n-i-1]=rr;
           }
        }
        for(int i=0; i<n; i++){
          //  System.out.println(height[i]+" "+l[i]+" "+r[i]);
            sum+=Math.min(l[i],r[i])-height[i];
            
        }
        return sum;
    }
}


Question 53: Multiply Strings
 import java.math.BigInteger;
class Solution {
    public String multiply(String num1, String num2) {
        BigInteger A, B,C; 
        A=new BigInteger(num1);
        B=new BigInteger(num2);
               return String.valueOf(A.multiply(B));
    }
}

Question 56: Permutations
class Solution {
     List<List<Integer>> l=new ArrayList<>();
    public List<List<Integer>> permute(int[] nums) {
        List<Integer> ll=new ArrayList<>();
       per(ll,nums);
       return l;
    }
    public void per(List<Integer> ll,int[] nums){
        if(ll.size()==nums.length){
            l.add(new ArrayList<>(ll));
        }
        for(int i=0; i<nums.length; i++){
            if(ll.contains(nums[i])==false){
            ll.add(nums[i]);
            per(ll,nums);
            ll.remove(ll.size()-1);   
            }
        }
        
    }
}

Question 57: Permutations II
class Solution {
    
    List<List<Integer>> solutions = new ArrayList<>();
    
    public List<List<Integer>> permuteUnique(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i: nums){
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        permute(new LinkedList<>(), map);
        return solutions;
        
    }
    
    public void permute(List<Integer> curr, HashMap<Integer, Integer> left){
        if (left.size() == 0){
            solutions.add(new ArrayList<>(curr));
            return;
        }
        Set<Integer> set = new HashSet<>(left.keySet());
        for (int i: set){
            curr.add(i);
            if (!left.remove(i, 1)) left.replace(i, left.get(i) - 1);
            permute(curr, left);
            curr.remove(curr.size() - 1);
            left.put(i, left.getOrDefault(i, 0) + 1);
        }
    }
}

Question 59: Group Anagrams
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        String a[]=new String[strs.length];
        int i=0;
        HashMap<String,ArrayList<String>> h=new HashMap<>();
        for(String ele:strs){
            char ch[]=ele.toCharArray();
            Arrays.sort(ch);
            String s = new String(ch);
            ArrayList<String> l=h.getOrDefault(s,new ArrayList<String>());
            l.add(ele);
            h.put(s,l);
        }
        List<List<String>> fin=new ArrayList<>();
        for(List<String> ele:h.values()){
            fin.add(ele);
        }
        return fin;
    }
}

Question 60: Pow(x, n)
class Solution {
    public double myPow(double x, int n) {
        return Math.pow(x,n);
    }
}

Question 63: Maximum Subarray
import java.util.*;
class Solution {
    public int maxSubArray(int[] nums) {
        
        int msum=0,csum=0;
        for(int i=0; i<nums.length; i++){
            csum+=nums[i];
            System.out.println(csum+" i="+i);
            if(csum<0){
                csum=0;
            }
            else if(csum>msum){
                msum=csum;
            }
        }
        Arrays.sort(nums);
        if(nums[nums.length-1]<0){
            return nums[nums.length-1];
        }
        return msum;
    }
}

Question 64: Spiral Matrix
    List<Integer> ans = new ArrayList<>();
    
    
    int top = 0, right = matrix[0].length-1, bottom = matrix.length-1, left = 0;
    
    
    while(top <= bottom && left <= right){
        
        for(int i = left; i<=right; i++){
            ans.add(matrix[top][i]);
        }
        top++;
        
        for(int i = top; i<=bottom; i++){
            ans.add(matrix[i][right]);
        }
        
        right--;
        
        if(top<=bottom){
        
            for(int i = right; i>=left; i--){
                ans.add(matrix[bottom][i]);
            }
            bottom--;
            
        }
        
        if(left<=right){

            for(int i = bottom; i>=top; i--){
                ans.add(matrix[i][left]);
            }

            left++;
        }
        
    }
    
    return ans;
}

Question 68: Length of Last Word
class Solution {
    public int lengthOfLastWord(String s) {
        int word_length = 0;
        if (s.length() == 1){
            return 1;
        }
        for (int i = s.length() - 1; i >= 0; i--){
            if (s.charAt(i) != ' '){
                word_length++;
            }else if (word_length != 0 && s.charAt(i) == ' '){
                return word_length;
            }
            
        }
        return word_length;
    }
}

Question 71: Rotate List
class Solution {
    private int getLength(ListNode head) {
        int len = 0;
        while(head != null) {
            len++;
            head = head.next;
        }
        return len;
    }
    
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null)   return head;
        
        // calculate length and update k
        int len = getLength(head);
        k = k % len;
        
        // get the required nodes
        ListNode fast = head, slow = head;
        while(k != 0) {
            fast = fast.next;
            k--;
        }
        while(fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        
        // form the new links
        fast.next = head;
        head = slow.next;
        slow.next = null;
        
        return head;
    }
}

Question 72: Unique Paths
class Solution 
{
    public int uniquePaths(int m, int n) 
    {
        int a[][] = new int[m][n];
        
        for(int i=0;i<m;i++)
            a[i][0] = 1;
        
        for(int j=0;j<n;j++)
            a[0][j] = 1;
        
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
                a[i][j] = a[i][j-1] + a[i-1][j];
        
        return a[m-1][n-1];
    }
}

Question 74: Minimum Path Sum
class Solution {
    int[][] dp;
    public int minPathSum(int[][] grid) {
        dp = new int[grid.length][grid[0].length];
        for(int[] x:dp)
            Arrays.fill(x,-1);
        return findPath(grid,grid.length-1,grid[0].length-1);
    }
    public int findPath(int[][] grid,int i,int j) {
        if (i==0 && j==0)
            return grid[i][j];
        if (dp[i][j]!=-1)
            return dp[i][j];
        int up = Integer.MAX_VALUE, left = Integer.MAX_VALUE;
        if (i>0)
            up = grid[i][j] + findPath(grid,i-1,j);
        if (j>0)
            left = grid[i][j] + findPath(grid,i,j-1);
        return dp[i][j] = Math.min(up,left);
    }
}